package com.tuazon.student;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.*;


@Controller // This means that this class is a Controller
@RequestMapping(path = "/students") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private StudentRepository studentRepository;

    @PostMapping // Map ONLY POST Requests
    public @ResponseBody String addNewStudent(
            @RequestParam String firstName,
            @RequestParam String lastName,
            @RequestParam String course,
            @RequestParam String snumber) {

        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Student c = new Student();

        c.setFirstName(firstName);
        c.setLastName(lastName);
        c.setCourse(course);
        c.setStudentNumber(snumber);

        String response;
        try {
            Student s = studentRepository.save(c);
            response = "Success adding student with id: " + s.getId();
        } catch (Exception e) {
            response = "Error " + e.getMessage();
        }
        return response;
    }

    @GetMapping
    public @ResponseBody Iterable<Student> getAllStudent() {
        // This returns a JSON or XML with the users
        return studentRepository.findAll();
    }

    @GetMapping(path = "/{id}") // Map ONLY POST Requests
    public @ResponseBody Optional<Student> getStudent(@PathVariable Integer id) {
        return studentRepository.findById(id);
    }

    @DeleteMapping(path = "/{id}") // Map ONLY POST Requests
    public @ResponseBody String delete(@PathVariable Integer id) {

        String response;
        try {
            studentRepository.deleteById(id);
            response = "Deleted";
        } catch (Exception e) {
            response = "Error " + e.getMessage();
        }
        return response;
    }
}